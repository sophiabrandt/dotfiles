#!/usr/bin/env bash
#
# MIT
#
# Bash script to add funcitonality to todo.txt cli by Gina Trapani. Most
# Important Tasks (MIT) are intended to be specific todo items associated
# with a specific day. They differ from events in that they do not necessarily
# have a specified time. As a best practice only 3 MITs should be scheduled
# per day. This script is intended to parse the todo.txt file and generate a
# schedule of MITs by day of the week if no arguments are given, or add new
# MITs to the list.
#
# MITs are stored in the following format:
#   {YYYY.MM.DD} mit task information
#
# Author(s): Cody Buell
#
# Licensing: GPL, http://www.gnu.org/copyleft/gpl.html
#
# Revisions: 2012.06.27 Framework roughed out.
#            2012.06.28 Initial version completed.
#            2012.06.29 Moved away from using DOY to prevent problems in
#                       spanning years.
#            2012.07.01 Added ability to move MITs.
#            2012.07.02 Made greps a bit more robust.
#            2012.07.13 Added ability to invert context listings.
#            2012.09.22 Modified greps and seds to handle MITs with priorities.
#            2012.10.29 Merged corrections from 00Davo regarding #2.
#            2012.10.31 Added BSD vs GNU date detection.
#            2013.01.16 Merged enhancements from rcraggs, adding ability to move
#                       non-mit tasks into a mit and vise versa.  Incremented
#                       version number from 1.1 to 1.2.  Setup core functions,
#                       added short options section and re-arranged accordingly.
#            2013.03.10 Added support for dated tasks per Justin Le's request.
#                       Incremented version number from 1.2 to 1.3.
#            2015.06.29 Support for GNU Sed 4.2.2.
#            2017.04.20 Added yearly, quarterly and montly mit's
#
# Requisite: todo.sh by Gina Trapanni
#            bash > version 4 (or remove the ^ var substitutions for capitalizing
#              variables i.e. ${2^} --> $2
#
# Resources: https://github.com/ginatrapani/todo.txt-cli/wiki
#
# Task List: - Add extra check on mit mv to see that it is an MIT being moved.
#            - Add ability to add a time {YYYY.MM.DD HH:MMam/pm}
#                t mit today@10pm go to work @nasa
#            - Fix mv function so that when a task is converted to a mit, the
#                whole task name is displayed in the results.  Currently it
#                snips out the first word.
#            - Create brew formula.
#            - Rewrite in a speedier language.
#            - Date tab hinting, dates with weekday names, on mit creation.
#            - Add 't mit [today,tomorrow,dow]' report output.
#            - Ability to sort, prioritize and schedule.
#            - Add 'events' to mit, non completable items that auto remove after date.
#            - Overview to show exact dates for 0 - 14 days out, then by 'this month' then 'next month +'

################################################################################
################################################################################
#                                                                              #
#  ENV DETECTION & VAR PREP                                                    #
#                                                                              #
################################################################################
################################################################################

if date -v 1d > /dev/null 2>&1; then    # detect date version in use
  DVER="BSD"                            # set as bsd date
else                                    # if it isn't bsd then...
  DVER="GNU"                            # set as gnu date
fi

if sed --version > /dev/null 2>&1; then # detect sed version in use
  SEDI="sed -i "                        # set as gnu sed syntax
else                                    # if it isn't gnu then...
  SEDI="sed -i sedbak "                     # set as bsd sed syntax
fi

VERSION="2.0"                           # mit version number
ACTION=$1                               # set first argument to action

shift                                   # shift arguments, exclude todo.sh

################################################################################
################################################################################
#                                                                              #
#  USAGE & MESSAGES                                                            #
#                                                                              #
################################################################################
################################################################################

usage() {
  cat <<-ENDOFUSAGE

	  Most Important Tasks (MIT):

	    Displays from or adds Most Important Tasks (MIT) to todo.txt file.

	    $(basename $0) [-h|--help] [-v|--version] [date|day task] [rm ID]
	        [not @context|@context] [mv ID DATE|DAY]

	    -h, --help      Displays help message.
	    -v, --version   Displays version information.

	    Accepted DATE|DAY formats:

	      for daily mit's
	      ---------------
	        'today'
	        'tomorrow'
	        day of the week or abbreviation**     i.e. monday|mon
	        YYYY.MM.DD                            i.e. 2080.01.15
	      
	      for yearly mit's
	      ----------------
	        YYYY                                  i.e. 2080
          YYYY.00.00                            i.e. 2080.00.00

	      for quarterly mit's
	      -------------------
	        QN **                                 i.e. q1 | q4
	        YYYYQN                                i.e. 2080q4
	        YYYY.QN                               i.e. 2080.Q1

	      for monthly mit's
	      -----------------
	        month name ore abbreviation**         i.e. january|jan
	        YYYY.MM.00                            i.e. 2080.01.00
	        YYYYMM                                i.e. 208001
	        YYYY.MM                               i.e. 2080.01

	      ** Assumes current week|or year, if chosen day|date has already
	         passed then it will roll to the next upcoming day|date.


	    Examples:

	      mit DATE|DAY task
	        DATE must be in the format of YYYY.MM.DD.
	        DAY can be full or short day names, today or tomorrow.

	      mit DATE|DAY
	        DATE must be in the format of YYYY.MM.DD.
	        DAY can be full or short day names, today or tomorrow.

        mit rm ID
          Convert the MIT identified by ID to a standard task.

        mit not @context|@context
          Displays all MIT's not in or in specified context.

        mit mv ID DATE|DAY
          Move the MIT identified by ID to a new day.
          DATE must be in the format of YYYY.MM.DD.
          DAY can be full or short day names, today or tomorrow.

        mit wed upload code to github
          Creates a new MIT for next Wednesday unless the current day
          is Wednesday in which case it will be created for today.

	ENDOFUSAGE
  exit
}

error() {
  echo "error: $1"
  echo "usage: $(basename $0) [-hv] [date|day task] [not @context|@context] [mv ID DATE|DAY]"
}

version() {
  echo "mit version $VERSION"
}

################################################################################
################################################################################
#                                                                              #
#  HELPERS                                                                     #
#                                                                              #
################################################################################
################################################################################

#/
 # Make Day of Week
 #
 # Returns the day of the week of the specified date.
 #
 # @param {string} variable to set
 # @param {string} YYYY.MM.DD formatted date
 # @return {var} name defined by first param, day of week (i.e. Monday)
#/

makeDOW() {
  if [ $DVER = "BSD" ]; then
    eval $1=`date -j -f "%Y.%m.%d" $2 +%A`
  else
    local DAY=`echo $2 | sed 's/\./\//g'`
    eval $1=`date -d $DAY +%A`
  fi
}

#/
 # Make Date
 #
 # Converts a YYYY.MM.DD date to a more friendly format.
 #
 # @param {string} variable to set
 # @param {string} YYYY.MM.DD formatted date
 # @return {var} name defined by first param, formatted date (i.e. Tuesday, Setpember 19th)
#/

makeDATE() {
  if [ $DVER = "BSD" ]; then
    eval $1=`date -j -f "%Y.%m.%d" $2 "+%A', '%B' '%d"`
  else
    local DAY=`echo $2 | sed 's/\./\//g'`
    eval $1=`date -d $DAY "+%A', '%B' '%d"`
  fi
}

#/
 # Make Month
 #
 # Converts a YYYYMM00 date to a more friendly format.
 #
 # @param {string} variable to set
 # @param {string} YYYYMM00 formatted date
 # @return {var} name defined by first param, formatted date (i.e. March 2100)
#/

makeMONTH() {
  # change the last 0 in second param to 1 else date freaks out
  RAWTIME=`echo $2 | sed 's/0$/1/'`
  if [ $DVER = "BSD" ]; then
    eval $1=`date -j -f "%Y%m%d" $RAWTIME "+%B' '%Y"`
  else
    eval $1=`date -d $RAWTIME "+%B' '%Y"`
  fi
}

#/
 # Parse Day
 #
 # Returns the date of the next dow passed as an arg.
 #
 # @param {string} dow or date diff (i.e. Monday, 1d, etc)
 # @return {var} MITDATE -> YYYY.MM.DD formatted date
#/

parseDAY() {
  if [ $DVER = "BSD" ]; then
    # if current dow = mit's dow then put it for 1 week out, needed for bsd date only
    [[ $1 =~ `date +%a | tr '[:upper:]' '[:lower:]'` ]] && PUSH='-v +7d'
    MITDATE=`date -v +$1 $PUSH +%Y.%m.%d`
  else
	  local dayid=$1
	  if [ $dayid = "1d" ]; then
		  dayid="1day"
	  fi
    MITDATE=`date -d +$dayid +%Y.%m.%d`
  fi
}

#/
 # Parse Month
 #
 # Returns the date of the month passed as an arg.
 #
 # @param {string} month (i.e. january, feb, etc)
 # @return {var} MITDATE -> YYYY.MM.00 formatted date
#/

parseMONTH() {
  if [ $DVER = "BSD" ]; then
    MITDATE=`date -v +$1 +%Y.%m.00`
  else
    # get current month, strip padding 0's
    CURMONTH=`date +%-m`
    CURYEAR=`date +%Y`
    case $1 in
      january|jan )
        SELMONTH=1
        ;;
      february|feb )
        SELMONTH=2
        ;;
      march|mar )
        SELMONTH=3
        ;;
      april|apr )
        SELMONTH=4
        ;;
      may )
        SELMONTH=5
        ;;
      june|jun )
        SELMONTH=6
        ;;
      july|jul )
        SELMONTH=7
        ;;
      august|aug )
        SELMONTH=8
        ;;
      september|sep|sept )
        SELMONTH=9
        ;;
      october|oct )
        SELMONTH=10
        ;;
      november|nov )
        SELMONTH=11
        ;;
      december|dec )
        SELMONTH=12
        ;;
    esac

    # if selected month is already past, pun in next year
    [[ $SELMONTH -ge $CURMONTH ]] && {
      SELYEAR=$CURYEAR
    } || {
      SELYEAR=$(($CURYEAR+1))
    }

    # re-pad our selected month
    SELMONTH=`echo $SELMONTH | sed 's/^[1-9]$/0&/'`

    # set our mitdate
    MITDATE="${SELYEAR}.${SELMONTH}.00"
  fi
}

#/
 # Parse Quarter
 #
 # Returns the date of the quarter passed as an arg.
 #
 # @param {string} quarter (i.e. q1, q2, etc)
 # @return {var} MITDATE -> YYYY.QN.00 formatted date
#/

parseQUARTER() {

  # get the current quarter
  case `date +%-m` in
    [1-3] )
      CURQUARTER=1
      ;;
    [4-6] )
      CURQUARTER=2
      ;;
    [7-9] )
      CURQUARTER=3
      ;;
    [10-12] )
      CURQUARTER=4
      ;;
  esac

  CURYEAR=`date +%Y`
  SELQUARTER=`echo $1 | sed 's/[^[:digit:]]//'`

  [[ $SELQUARTER -ge $CURQUARTER ]] && {
    SELYEAR=$CURYEAR
  } || {
    SELYEAR=$(($CURYEAR+1))
  }

  MITDATE="${SELYEAR}.Q${SELQUARTER}.00"
}

################################################################################
################################################################################
#                                                                              #
#  CORE FUNCTIONS                                                              #
#                                                                              #
################################################################################
################################################################################

#/
 # Get MITs
 #
 # Prints out mit's matching specifind date criteria.
 #
 # @param {string} bash conditional operator (i.e. -lt|-eq|-gt)
 # @param {string} date in YYYY.MM.DD format
 # @param {string} mit array to query (years,quarters,months,days)
 # @return {void}
#/

getMITS() {

  OPERATOR=$1
  DATE=$2
  ARRAY=$3
  case $ARRAY in
    years )
      for (( i=0; i < ${#MITTASKSYEAR[@]}; i++ )); do
        MITDATE=`echo ${MITTASKSYEAR[$i]} | awk '{print $1}' | sed 's/\.//g'`
        MITTASK=`echo ${MITTASKSYEAR[$i]} | awk '{$1 = ""; print}'`
        if [ "$MITDATE" $OPERATOR "$DATE" ]; then
          echo " $MITTASK"
        fi
      done
      ;;
    quarters )
      for (( i=0; i < ${#MITTASKSQUARTER[@]}; i++ )); do
        MITDATE=`echo ${MITTASKSQUARTER[$i]} | awk '{print $1}' | sed 's/\.//g'`
        case `echo $MITDATE | sed 's/.*[qQ]\([1-4]\).*/\1/'` in
          1 )
            MITDATE=`echo $MITDATE | sed 's/[qQ][1-4]00/0101/'`
            ;;
          2 )
            MITDATE=`echo $MITDATE | sed 's/[qQ][1-4]00/0401/'`
            ;;
          3 )
            MITDATE=`echo $MITDATE | sed 's/[qQ][1-4]00/0701/'`
            ;;
          4 )
            MITDATE=`echo $MITDATE | sed 's/[qQ][1-4]00/1001/'`
            ;;
        esac
        MITTASK=`echo ${MITTASKSQUARTER[$i]} | awk '{$1 = ""; print}'`
        if [ "$MITDATE" $OPERATOR "$DATE" ]; then
          echo " $MITTASK"
        fi
      done
      ;;
    months )
      for (( i=0; i < ${#MITTASKSMONTH[@]}; i++ )); do
        MITDATE=`echo ${MITTASKSMONTH[$i]} | awk '{print $1}' | sed 's/\.//g'`
        MITTASK=`echo ${MITTASKSMONTH[$i]} | awk '{$1 = ""; print}'`
        if [ "$MITDATE" $OPERATOR "$DATE" ]; then
          echo " $MITTASK"
        fi
      done
      ;;
    days )
      for (( i=0; i < ${#MITTASKSDAY[@]}; i++ )); do
        MITDATE=`echo ${MITTASKSDAY[$i]} | awk '{print $1}' | sed 's/\.//g'`
        MITTASK=`echo ${MITTASKSDAY[$i]} | awk '{$1 = ""; print}'`
        if [ "$MITDATE" $OPERATOR "$DATE" ]; then
          echo " $MITTASK"
        fi
      done
      ;;
  esac
}

#/
 # Move MIT
 #
 # Move mit to another date and print result.
 #
 # @param {string} task id
 # @param {string} date to move to, all parsed options accepted (i.e. tomorrow, mon, YYYY.MM.DD, etc)
 # @return {void}
#/

moveMIT() {
  # check that second argument is an id and a valid one
  if [[ $1 =~ ^[0-9]+$ ]]; then
    MITTASK=`awk -v ID=$1 'NR==ID {sub(/\{[qQ0-9.]{10}\}/, ""); sub(/^ /, ""); print "\x27"$0"\x27"}' "$TODO_FILE"`

    TASK=`awk -v ID=$1 'NR==ID {print "\x27"$0"\x27"}' "$TODO_FILE"`
    # Add a date to this item if there is none so that we can move it.
    if [[ ! $TASK =~ \{[0-9]{4}\.[qQ0-9]{2}\.[0-9]{2}\} ]]; then
      TODAY="`date +%Y.%m.%d`"
      FIRST_PART=`awk '{print $1"\x27"}' <<< $TASK`
      SECOND_PART=`awk '{print "\x27"$2"\x27"}' <<< $TASK`
      if [[ $FIRST_PART =~ ([A-Z] ) ]]; then
        if [[ $SECOND_PART =~ [0-9]{4}-[0-9]{2}-[0-9]{2} ]]; then
          $SEDI "$1 s/\(^([A-Z]\{1\} ) [0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\} \)\(.*$\)/\1{$TODAY} \2/" "$TODO_FILE"
        else
          $SEDI "$1 s/\(^([A-Z]\{1\} ) \)\(.*$\)/\1{$TODAY} \2/" "$TODO_FILE"
        fi
      elif [[ $FIRST_PART =~ [0-9]{4}-[0-9]{2}-[0-9]{2} ]]; then
        $SEDI "$1 s/\(^[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\} \)\(.*$\)/\1{$TODAY} \2/" "$TODO_FILE"
      else
        $SEDI "$1 s/^/{$TODAY} /" "$TODO_FILE"
      fi
    fi

    case $2 in
      today )
        MITDATE="`date +%Y.%m.%d`"
        MOVEDTO="today"
        ;;  
      tomorrow )
        parseDAY 1d
        MOVEDTO="tomorrow"
        ;;  
      monday|mon|tuesday|tue|wednesday|wed|thursday|thu|friday|fri|saturday|sat|sunday|sun )
        parseDAY $2
        makeDOW DOW $MITDATE
        MOVEDTO=$DOW
        ;;  
      [0-9][0-9][0-9][0-9].[0-9][0-9].[0-9][0-9] )
        makeDATE DATE $2
        MITDATE=$2
        MOVEDTO=$DATE
        ;;  
      # parsing misc quarter values
      q[1-4] )
        parseQUARTER $2
        MOVEDTO=$2
        ;;
      # parsing misc month values
      january|jan|february|feb|march|mar|april|apr|may|june|jun|july|august|aug|september|sep|sept|october|oct|november|nov|december|dec )
        parseMONTH $2
        MOVEDTO=$2
        ;;
      # parsing a year in YYYY format
      [0-9][0-9][0-9][0-9] )
        MITDATE="${MITDATE}.00.00"
        MOVEDTO=$2
        ;;
      * ) 
        error "invalid date"
        exit
        ;;  
    esac
    
    # run the sed and echo out the status
    $SEDI "$1 s/{[0-9]\{4\}\.[qQ0-9][0-9]\.[0-9]\{2\}}/{$MITDATE}/" "$TODO_FILE"
    echo "TODO: MIT $MITTASK moved to ${MOVEDTO}."
  else
    error "invalid task id"
  fi
}

#/
 # Remove MIT
 #
 # Convert mit to a normal task and print result.
 #
 # @param {string} task id
 # @return {void}
#/

removeMIT() {
  $SEDI "$1 s/{[0-9]\{4\}\.[qQ0-9]\{2\}\.[0-9]\{2\}}[ ]*//" "$TODO_FILE"
  echo "Removed MIT from task $1"
}

#/
 # Process MITs
 #
 # Process all the MITs in preparation for printing to screen.
 #
 # @return {void}
#/

processMITs() {

  # define array element separator as newlines
  OLDIFS=$IFS
  IFS=$'\n'

  # invert search if not is specified before context
  if [ "$1" = "not" ]; then
    shift
    FLAG="-v"
  else
    FLAG=""
  fi

  # pull out MITs from the todo file, clean and sort
  # grepping for "X {YYYY.[qQ]MM.DD}", "{YYYY.[qQ]MM.DD}", "X YYYY-MM-DD {YYYY.[qQ]MM.DD}" or "YYYY-MM-DD {YYYY.[qQ]MM.DD}"
  NUM='[0-9].* '                                    # number
  PRI='([A-Z]\{1\}) '                               # priority
  ADD='[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\} '           # assigned due date
  MDD='{[0-9]\{4\}\.[qQ0-9][0-9]\.[0-9]\{2\}}'      # mit due date
  # creat an array with values like YYYY.MM.DD [priority] [task info] [task number]
  MITS=(`grep -n "^$PRI$MDD\|^$MDD\|^$PRI$ADD$MDD\|^$ADD$MDD" "$TODO_FILE" | \
         grep $FLAG "$1" | \
         sed -e "s/:/ /;" \
             -e "s/\(^$NUM\)\($PRI\)\($ADD\)\(.*$\)/\1\2\4/" \
             -e "s/\(^$NUM\)\($ADD\)\(.*$\)/\1\3/" \
             -e "s/\(^$NUM\)\($PRI\)\($MDD \)\(.*\)/\1\3\2\4/" \
             -e "s/{//;s/}//" | \
         awk '{s=$1;e=$NF;$1="";$NF=e" ("s")"}1' | \
         sort`)

  # return array element separator to spaces
  IFS=$OLDIFS

  # make an array of ordered unique MIT dates YYYY.MM.DD
  DATES=(`grep "^$PRI$MDD\|^$MDD\|^$PRI$ADD$MDD\|^$ADD$MDD" "$TODO_FILE" | \
          grep $FLAG "$1" | \
          sed 's/^.*{\([0-9]\{4\}\.[qQ0-9][0-9]\.[0-9]\{2\}\).*$/\1/' | \
          sort | \
          uniq`)

  # bail if there are no mits
  if [ "${#DATES[@]}" -eq "0" ]; then
    echo "No MITs found."
    exit
  fi

  # separate out month, quarter, and year formatted dates
  MITDAYS=()
  MITMONTHS=()
  MITQUARTERS=()
  MITYEARS=()
  for day in ${DATES[@]}; do
    # order is important here
    case $day in
      [0-9][0-9][0-9][0-9].00.00 )
        MITYEARS+=($day)
        ;;
      [0-9][0-9][0-9][0-9].[0-9][0-9].00 )
        MITMONTHS+=($day)
        ;;
      [0-9][0-9][0-9][0-9].[qQ][0-9].00 )
        MITQUARTERS+=($day)
        ;;
      * )
        MITDAYS+=($day)
        ;;
    esac
  done

  # define array element separator as newlines
  OLDIFS=$IFS
  IFS=$'\n'

  # separate out month, quarter, and year tasks
  MITTASKSDAY=()
  MITTASKSMONTH=()
  MITTASKSQUARTER=()
  MITTASKSYEAR=()
  for (( i=0; i < ${#MITS[@]}; i++ )); do
    MITDATE=`echo ${MITS[$i]} | awk '{print $1}'`
    MITTASK=`echo ${MITS[$i]} | awk '{$1 = ""; print}'`
    # order is important here
    case $MITDATE in
      [0-9][0-9][0-9][0-9].00.00 )
        MITTASKSYEAR+=(${MITS[$i]})
        ;;
      [0-9][0-9][0-9][0-9].[0-9][0-9].00 )
        MITTASKSMONTH+=(${MITS[$i]})
        ;;
      [0-9][0-9][0-9][0-9].[qQ][0-9].00 )
        MITTASKSQUARTER+=(${MITS[$i]})
        ;;
      * )
        MITTASKSDAY+=(${MITS[$i]})
        ;;
    esac
  done

  # return array element separator to spaces
  IFS=$OLDIFS

  # get todays date for comparisons later
  TODAY=`date +%Y%m%d`
  THISYEAR=`date +%Y0000`
  THISMONTH=`date +%Y%m00`
  case `date +%-m` in
    [1-3] )
      THISQUARTER=`date +%Y0101`
      ;;
    [4-6] )
      THISQUARTER=`date +%Y0401`
      ;;
    [7-9] )
      THISQUARTER=`date +%Y0701`
      ;;
    [10-12] )
      THISQUARTER=`date +%Y1001`
      ;;
  esac

}

#/
 # Display MITs
 #
 # Print out all the mits.
 #
 # @return {void}
#/

displayMITs() {

  # run yearly mit's only if there are some
  if [ "${#MITYEARS[@]}" -gt "0" ]; then
    echo ""
    echo "                                  Yearly MIT's"
    echo "--------------------------------------------------------------------------------"
    echo ""

    # check for past due yearly mit's
    for year in ${MITYEARS[@]}; do
      # strip out the .'s between YYYY.00.00
      YEAR=`echo $year | sed 's/\.//g'`
      # if we find just one past due mit print them all and break out
      if [ "$YEAR" -lt "$THISYEAR" ]; then
        echo "Past Due:"
        getMITS -lt $THISYEAR
        echo ""
        break
      fi
    done

    # processing of all other yearly mits
    for year in ${MITYEARS[@]}; do

      # get the date and strip out .'s YYYY0000
      YEAR=`echo $year | sed 's/\.//g'`

      # find mit's due this year
      if [ "$YEAR" -eq "$THISYEAR" ]; then
        echo "This Year:"
        getMITS -eq $YEAR years
        echo ""

      # everything else
      elif [ "$YEAR" -gt "$THISYEAR" ]; then
        echo "$YEAR:" | sed 's/0000//'
        getMITS -eq $YEAR years
        echo ""
      fi

    done
  fi

  # run quarterly mit's only if there are some
  if [ "${#MITQUARTERS[@]}" -gt "0" ]; then
    echo ""
    echo "                                Quarterly MIT's"
    echo "--------------------------------------------------------------------------------"
    echo ""

    # check for past due quarterly mit's
    for quarter in ${MITQUARTERS[@]}; do
      # determine the quarter number 1-4
      QN=`echo $quarter | sed 's/.*[qQ]\([1-4]\).*/\1/'`
      case $QN in
        1 )
          QUARTER=`echo $quarter | sed 's/[qQ][1-4]\.00/0101/;s/\.//g'`
          ;;
        2 )
          QUARTER=`echo $quarter | sed 's/[qQ][1-4]\.00/0401/;s/\.//g'`
          ;;
        3 )
          QUARTER=`echo $quarter | sed 's/[qQ][1-4]\.00/0701/;s/\.//g'`
          ;;
        4 )
          QUARTER=`echo $quarter | sed 's/[qQ][1-4]\.00/1001/;s/\.//g'`
          ;;
      esac
      # if we find just one past due mit print them all and break out
      if [ "$QUARTER" -lt "$THISQUARTER" ]; then
        echo "Past Due:"
        getMITS -lt $THISQUARTER quarters
        echo ""
        break
      fi
    done

    # processing of all other quarterly mits
    for quarter in ${MITQUARTERS[@]}; do

      # determine the quarter number 1-4
      QN=`echo $quarter | sed 's/.*[qQ]\([1-4]\).*/\1/'`
      YR=`echo $quarter | sed 's/\([0-9]\{4\}\).*$/\1/'`
      case $QN in
        1 )
          QUARTER=`echo $quarter | sed 's/[qQ][1-4]\.00/0101/;s/\.//g'`
          ;;
        2 )
          QUARTER=`echo $quarter | sed 's/[qQ][1-4]\.00/0401/;s/\.//g'`
          ;;
        3 )
          QUARTER=`echo $quarter | sed 's/[qQ][1-4]\.00/0701/;s/\.//g'`
          ;;
        4 )
          QUARTER=`echo $quarter | sed 's/[qQ][1-4]\.00/1001/;s/\.//g'`
          ;;
      esac

      # find mit's due this quarter
      if [ "$QUARTER" -eq "$THISQUARTER" ]; then
        echo "This Quarter:"
        getMITS -eq $QUARTER quarters
        echo ""

      # everything else
      elif [ "$QUARTER" -gt "$THISQUARTER" ]; then
        echo "Q$QN $YR:"
        getMITS -eq $QUARTER quarters
        echo ""
      fi

    done
  fi

  # run monthly mit's only if there are some
  if [ "${#MITMONTHS[@]}" -gt "0" ]; then
    echo ""
    echo "                                 Monthly MIT's"
    echo "--------------------------------------------------------------------------------"
    echo ""

    # check for past due monthly mit's
    for month in ${MITMONTHS[@]}; do
      # strip out the .'s between YYYY.MM.00
      MONTH=`echo $month | sed 's/\.//g'`
      # if we find just one past due mit print them all and break out
      if [ "$MONTH" -lt "$THISMONTH" ]; then
        echo "Past Due:"
        getMITS -lt $THISMONTH months
        echo ""
        break
      fi
    done

    # processing of all other monthly mits
    for month in ${MITMONTHS[@]}; do

      # get the date and strip out .'s YYYYMM00
      MONTH=`echo $month | sed 's/\.//g'`

      # find mit's due this month
      if [ "$MONTH" -eq "$THISMONTH" ]; then
        echo "This Month:"
        getMITS -eq $MONTH months
        echo ""

      # everything else
      elif [ "$MONTH" -gt "$THISMONTH" ]; then
        makeMONTH PPMONTH $MONTH
        echo "$PPMONTH:"
        getMITS -eq $MONTH months
        echo ""
      fi

    done
  fi

  # run daily mit's only if there are some
  if [ "${#MITDAYS[@]}" -gt "0" ]; then
    echo ""
    echo "                                  Daily MIT's"
    echo "--------------------------------------------------------------------------------"
    echo ""

    # check for past due daily mit's
    for day in ${MITDAYS[@]}; do
      # strip out the .'s between YYYY.MM.DD
      DAY=`echo $day | sed 's/\.//g'`
      # if we find just one past due mit print them all and break out
      if [ "$DAY" -lt "$TODAY" ]; then
        echo "Past Due:"
        getMITS -lt $TODAY days
        echo ""
        break
      fi
    done

    # processing of all other daily mits
    for day in ${MITDAYS[@]}; do

      # get the date and strip out .'s YYYYMMDD
      DAY=`echo $day | sed 's/\.//g'`

      # how many days out is the mit
      DAYSTO=$(( $DAY - $TODAY ))

      # find mit's due today
      if [ "$DAY" -eq "$TODAY" ]; then
        echo "Today:"
        getMITS -eq $DAY days
        echo ""

      # anything in the next 7 days
      elif [ "$DAYSTO" -gt "0" ] && [ "$DAYSTO" -lt "7" ]; then
        makeDOW DOW $day
        echo "$DOW:"
        getMITS -eq $DAY days
        echo ""

      # everything else
      elif [ "$DAYSTO" -ge "7" ]; then
        makeDATE DATE $day
        echo "$DATE:"
        getMITS -eq $DAY days
        echo ""
      fi

    done
  fi

  exit

}

#/
 # Create MIT
 #
 # Creat a new MIT record and print result.
 #
 # @param {string} mit date, all parsed options accepted (i.e. tomorrow, mon, YYYY.MM.DD, etc)
 # @param {string}.*$ task to create
 # @return {void}
#/

createMIT() {

  # grab the passed date and lowecase it
  MITDATE=`echo $1 | tr [A-Z] [a-z]`

  # grab the rest of the argumets as the task
  shift
  MITTASK=$@

  # get todays date
  TODAY=`date +%u`

  # parse the passed date and format the task to be added
  # {YYYY.MM.DD} task to be added --> standard mit
  # {YYYY.MM.00} task to be added --> montly mit
  # {YYYY.00.00} task to be added --> yearly mit
  # {YYYY.QN.00} task to be added --> quarterly mit
  case $MITDATE in
    # parsing 'today'
    today )
      TYPE=days
      MITDATE=`date +%Y.%m.%d`
      ;;
    # parsing 'tomorrow'
    tomorrow )
      TYPE=days
      parseDAY 1d
      ;;
    # parsing a misc dow values
    monday|mon|tuesday|tue|wednesday|wed|thursday|thu|friday|fri|saturday|sat|sunday|sun )
      TYPE=days
      parseDAY $MITDATE
      ;;
    # parsing a full date in YYYY.MM.DD format, a month in YYYY.MM.00 format, or a year in YYYY.00.00 format
    [0-9][0-9][0-9][0-9].[0-1][0-9].[0-3][0-9] )
      TYPE=days
      ;;
    # parsing misc quarter values
    q[1-4] )
      TYPE=quarters
      parseQUARTER $MITDATE
      ;;
    # parsing misc month values
    january|jan|february|feb|march|mar|april|apr|may|june|jun|july|august|aug|september|sep|sept|october|oct|november|nov|december|dec )
      TYPE=months
      parseMONTH $MITDATE
      ;;
    # parsing a year in YYYY format
    [0-9][0-9][0-9][0-9] )
      TYPE=years
      MITDATE="${MITDATE}.00.00"
      ;;
    # parsing a quarter in YYYY.QN format
    [0-9][0-9][0-9][0-9].[qQ][1-4] )
      TYPE=quarters
      MITDATE="${MITDATE^^}.00"
      ;;
    # parsing a quarter in YYYYQN format
    [0-9][0-9][0-9][0-9][qQ][1-4] )
      TYPE=quarters
      MITDATE="`echo $MITDATE | sed 's/^[0-9][0-9][0-9][0-9]/&./;s/q/Q/'`.00"
      ;;
    # parsing a month in YYYY.MM format
    [0-9][0-9][0-9][0-9].[0-1][1-4] )
      TYPE=months
      MITDATE="${MITDATE}.00"
      ;;
    # parsing a month in YYYYMM format
    [0-9][0-9][0-9][0-9][0-1][1-4] )
      TYPE=months
      MITDATE="`echo $MITDATE | sed 's/^[0-9][0-9][0-9][0-9]/&./'`.00"
      ;;
    * )
      error "invalid date"
      exit
      ;;
  esac

  # if no task is provided or ?? then show mit's for the requested date, else create mit
  if [[ $MITTASK == "" || $MITTASK =~ ^@ ]]; then
    QUICKDATE=`echo $MITDATE | sed 's/\.//g'`
    processMITs $MITTASK
    echo ""
    getMITS -eq $QUICKDATE $TYPE
    echo ""
  else
    NEWMIT="{$MITDATE} $MITTASK"
    "$TODO_FULL_SH" add $NEWMIT
  fi

  exit

}

################################################################################
################################################################################
#                                                                              #
#  LONG OPTIONS                                                                #
#                                                                              #
################################################################################
################################################################################

# display usage
[ "$ACTION" = "usage" ] || [ x"$1" = x"--help" ] && {
  usage
  exit
}

# display version
[ x"$1" = x"--version" ] && {
  version
  exit
}

# move mit
[ x"$1" = x"mv" ] && {
  moveMIT $2 $3
  exit
}

# remove mit
[ x"$1" = x"rm" ] && {
  removeMIT $2
  exit
}

################################################################################
################################################################################
#                                                                              #
#  SHORT OPTIONS                                                               #
#                                                                              #
################################################################################
################################################################################

while getopts ":hv" Option; do
  case $Option in
    h ) 
      usage
      exit
      ;;  
    v ) 
      version
      exit
      ;;  
    : ) 
      echo "Option -$OPTARG requires an argument." >&2
      exit
      ;;
  esac
done

################################################################################
################################################################################
#                                                                              #
#  RUN IT                                                                      #
#                                                                              #
################################################################################
################################################################################

# if no arguments, or a context / not context passed print mits
[ -z $1 ] || [[ $1 =~ @.* ]] || [ "$1" = "not" ] && {
  processMITs $@
  displayMITs
}

# check if arg is not null and not picked up by an option, create mit
[ -n "$1" ] && {
  createMIT $@
}
