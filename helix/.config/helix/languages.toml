[[language]]
file-types = ["md"]
indent = { tab-width = 2, unit = "  " }
injection-regex = "md|markdown"
language-server = { command = "marksman", args=["server"] }
name = "markdown"
roots = [".marksman.toml"]
scope = "source.md"

[[language]]
name = "html"
formatter = { command = 'prettier', args = ["--parser", "html"] }

[[language]]
name = "json"
formatter = { command = 'prettier', args = ["--parser", "json"] }

[[language]]
name = "css"
formatter = { command = 'prettier', args = ["--parser", "css"] }

[[language]]
name = "scss"
formatter = { command = 'prettier', args = ["--parser", "scss"] }

[[language]]
name = "javascript"
# language-servers = [{ name = "typescript-language-server", except-features = [ "format" ] }, { name = "eslint", except-features = [ "format" ] } ]
formatter = { command = 'prettier', args = ["--parser", "typescript"] }

[[language]]
name = "jsx"
# language-servers = [{ name = "typescript-language-server", except-features = [ "format" ] }, { name = "eslint", except-features = [ "format" ] } ]
formatter = { command = 'prettier', args = ["--parser", "typescript"] }

[[language]]
name = "tsx"
# language-servers = [{ name = "typescript-language-server", except-features = [ "format" ] }, { name = "eslint", except-features = [ "format" ] } ]
formatter = { command = 'prettier', args = ["--parser", "typescript"] }

[[language]]
name = "typescript"
# language-servers = [{ name = "typescript-language-server", except-features = [ "format" ] }, { name = "eslint", except-features = [ "format" ] } ]
formatter = { command = 'prettier', args = ["--parser", "typescript"] }

[language-server.eslint]
args = ["--stdio"]
command = "vscode-eslint-language-server"

[language-server.eslint.config]
format = false
nodePath = ""
onIgnoredFiles = "off"
quiet = false
rulesCustomizations = []
run = "onType"
useESLintClass = false
validate = "on"
codeAction = { disableRuleComment = { enable = true, location = "separateLine" }, showDocumentation = { enable = true } }
codeActionOnSave = { mode = "all" }
experimental = { }
problems = { shortenToSingleLine = false }
workingDirectory = { mode = "auto" }
